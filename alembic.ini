# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = alembic

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the
# "slug" field
# max_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# databases to consider for offline migrations with `--sql`
# multiple databases can be specified as a comma separated list
# multiple_db_names = db1,db2

# the database connection string
sqlalchemy.url = sqlite:///data/taskhub.db

# begin transaction before running migrations
# transaction_per_migration = false

# The character that's used to split the schema name from the table name in
# the naming conventions lookup. Set this to None to disable schema name modification.
# schema_name_separator = .

# prefix identifiers in the naming conventions lookup with the name of the schema.
# schema_name_prefix = False

# the type of logging to apply to the revision command.
# either "none", "stderr", "stdout", "both", or "custom".
# if "custom", the custom_logger_hook option must also be present.
# revision_stdout_logger = none

# if revision_stdout_logger is set to "custom", this option
# specifies a function that will be called with the
# alembic.config.Config object as a single parameter.
# custom_logger_hook = mymodule:my_custom_logger

# if this is set to True, the migration environment will be passed the
# --sql connection URL as connection.connection, rather than using it
# to actually connect to the database.
# named configurations can also be used to specify this flag
# sql_omit_accessor = False

# if this is set to True, the migration environment will not use any
# connection at all, and all migrations will be completely offline.
# offline_migration = False

# a list of revision ids to ignore when running migrations
# ignore_rev_ids = 

[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint with attempts to fix using "ruff" - use the exec runner, execute a binary
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = --fix REVISION_SCRIPT_FILENAME

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handlers]
keys = console

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatters]
keys = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S