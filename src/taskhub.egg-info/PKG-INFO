Metadata-Version: 2.4
Name: taskhub
Version: 2.0.0
Summary: Taskhub MCP Server - 基于FastMCP的任务管理和代理协调服务器
Author-email: limian1761 <limian1761@gmail.com>
Project-URL: Homepage, https://github.com/your-repo/Taskhub
Project-URL: Bug Tracker, https://github.com/your-repo/Taskhub/issues
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: mcp[cli,fastapi]>=1.12.2
Requires-Dist: pydantic>=2.0.0
Requires-Dist: fastapi>=0.104.0
Requires-Dist: uvicorn[standard]>=0.24.0
Requires-Dist: jinja2>=3.1.0
Requires-Dist: python-multipart>=0.0.6
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: ruff; extra == "dev"
Requires-Dist: uvicorn; extra == "dev"

# Taskhub MCP Server

Taskhub是一个基于FastMCP的任务管理和代理协调服务器，专为支持多代理协作处理复杂任务而设计。

## 核心功能

- 🎯 **任务管理**: 提供任务的创建、分配、更新和监控功能。
- 🤖 **代理协调**: 根据代理的能力和声望，智能地分配任务。
- 🧠 **智能推荐**: 为代理推荐最匹配的任务，提升协作效率。
- ⭐ **声誉系统**: 通过任务评价和反馈，动态管理代理的声望。
- 📦 **数据归档**: 自动归档已完成的任务，简化数据生命周期管理。
- 🔗 **依赖管理**: 支持定义和处理任务之间的依赖关系。
- 📊 **状态跟踪**: 提供任务和代理的实时状态监控。
- 🔄 **租约机制**: 确保任务在认领后被锁定，防止重复处理。
- 🌐 **Web管理界面**: 内置现代化的Web面板，用于可视化管理。
- 🐳 **容器化支持**: 提供Docker和Docker Compose配置，简化部署流程。

## 快速开始

### 环境要求
- Python 3.10+
- [uv](https://github.com/astral-sh/uv) (推荐的包管理器)

### 安装

1.  **克隆仓库**
    ```bash
    git clone https://github.com/your-repo/Taskhub.git
    cd Taskhub
    ```

2.  **安装依赖**
    使用 `uv` 创建虚拟环境并安装依赖。项目配置为可编辑模式 (`-e`)，这意味着您对源代码的更改会立即生效。
    ```bash
    # 创建并激活虚拟环境
    uv venv
    source .venv/bin/activate  # Linux/macOS
    .venv\Scripts\activate    # Windows

    # 安装项目及核心依赖
    uv pip install -e .

    # (可选) 安装开发依赖
    uv pip install -e ".[dev]"
    ```

### 启动服务

直接运行开发脚本即可启动服务器。该脚本会处理所有必要的环境配置。

```bash
# Windows
scripts\run_dev.bat

# Linux/Mac
./scripts/run_dev.sh
```
服务器将在 `http://localhost:8000` 上启动，并支持SSE（Server-Sent Events）传输。

### Docker部署

使用项目提供的 `docker-compose.yml` 文件可以快速启动服务。

```bash
# 构建并以后台模式运行服务
docker-compose up --build -d
```

## 项目结构

项目遵循标准的 `src` 布局，以清晰地分离源代码和项目配置。

```
taskhub/
├── src/
│   └── taskhub/              # Python包的根目录
│       ├── __init__.py
│       ├── server.py         # 主服务器入口 (MCP)
│       ├── web_server.py     # Web管理界面服务器 (FastAPI)
│       ├── admin_server.py   # 后台管理任务服务器
│       ├── models/           # 数据模型 (Pydantic)
│       ├── storage/          # 数据存储层
│       ├── tools/            # MCP工具函数
│       ├── utils/            # 工具类
│       ├── templates/        # Web页面模板 (Jinja2)
│       └── static/           # 静态文件
├── tests/
│   └── test_taskhub.py       # 单元测试
├── configs/
│   ├── config.json           # 主配置文件
│   └── logging.json          # 日志配置
├── scripts/
│   ├── run_dev.bat           # Windows开发启动脚本
│   ├── run_dev.sh            # Linux/macOS开发启动脚本
│   └── launch.py             # 内部启动帮助脚本
├── Dockerfile
├── docker-compose.yml
├── pyproject.toml            # 项目配置 (PEP 621)
└── README.md
```

## API (工具函数)

以下是可通过MCP客户端调用的核心工具函数。

#### 1. `task_list`
列出符合条件的任务。

- **参数**: `status`, `capability`, `assignee` (均为可选)
- **示例**: `{"status": "pending", "capability": "python"}`

#### 2. `task_publish`
发布一个新任务。

- **参数**: `name`, `details`, `capability`, `created_by` (必填), `depends_on`, `candidates` (可选)
- **示例**: `{"name": "数据分析", "details": "分析用户行为数据", "capability": "python"}`

#### 3. `task_claim`
代理认领一个任务。

- **参数**: `task_id`, `agent_id`
- **示例**: `{"task_id": "task-001", "agent_id": "agent-001"}`

#### 4. `report_submit`
提交任务的执行报告。

- **参数**: `task_id`, `status` (completed/failed), `result`, `details` (可选)
- **示例**: `{"task_id": "task-001", "status": "completed", "result": "分析完成"}`

#### 5. `task_delete`
删除一个任务。

- **参数**: `task_id`, `force` (可选, 默认为 `false`)
- **注意**: 如果任务被认领或被其他任务依赖，`force=false` 时删除会失败。

#### 6. `report_evaluate`
评价一个任务报告，并更新代理声望。

- **参数**: `report_id`, `score` (0-100), `reputation_change`, `feedback`, `capability_updates` (可选)
- **示例**: `{"report_id": "report-001", "score": 95, "reputation_change": 10}`

#### 7. `task_archive`
归档一个已完成的任务。

- **参数**: `task_id`

#### 8. `task_suggest_agents`
为任务推荐最合适的代理。

- **参数**: `task_id`, `limit` (可选, 默认10)

#### 9. `agent_register`
注册代理并声明其能力。

- **重要**: `agent_id` 和 `name` **必须**通过环境变量设置，不能作为参数传入。
- **环境变量**: 
  - `AGENT_ID`: 代理的唯一标识符。
  - `AGENT_NAME`: 代理的显示名称。
- **示例**: 
  1.  **设置环境变量**:
      ```bash
      export AGENT_ID=code-expert-001
      export AGENT_NAME="代码专家"
      ```
  2.  **调用工具 (JSON参数)**:
      ```json
      {
        "capabilities": ["python", "code_review"],
        "capability_levels": {"python": 8, "code_review": 9}
      }
      ```
## Cursor 配置

使用项目提供的 `run_stdio.bat` (Windows) 或 `run_stdio.sh` (Linux/macOS) 脚本可以简化与Cursor等MCP客户端的集成。

**重要**: 在启动前，请确保您已在项目根目录下激活了虚拟环境 (`.venv`)，否则脚本可能无法正确执行。

```bash
# Windows
.venv\Scripts\activate
# Linux/macOS
source .venv/bin/activate
```

配置示例如下，将 `command` 指向对应的脚本即可。

```json
{
  "mcpServers": {
    "taskhub": {
      "command": "scripts/run_stdio.bat", // Windows. Use "scripts/run_stdio.sh" on Linux/macOS.  absolutely path
      "env": {
        "AGENT_ID": "YOUR_AGENT_ID",
        "AGENT_NAME": "YOUR_AGENT_NAME"
      }
    }
  }
}
```

## 贡献

欢迎通过提交 Issue 和 Pull Request 来为项目做出贡献。

### 开发规范
1.  **代码格式**: 使用 Black 和 Ruff 进行格式化和检查。
2.  **测试**: 所有新功能或修复都应附带相应的单元测试。
3.  **文档**: 及时更新 `README.md` 和相关代码注释。
4.  **提交信息**: 遵循 [Conventional Commits](https://www.conventionalcommits.org/) 规范。

## 许可证

本项目采用 MIT 许可证。
